/*
FLEXBOX
!!!! использовать технологию для элемента только тогда когда 
родитель выставлен во flex

for container :
ось. по ум - ось х - горизонталь
1. justify-content распределяем пространство между и вокруг элементов контейнера
-start, end, center, space-beetwen...
2. flex-direction (ось х, ось y)
3. align-items выравнивает элементы по оси y (по вертикали)
4. flex-wrap как сильно будут сжиматься элементы и будет ли
перенос элементов на новую строку (nowrap, wrap)

for item:
1. flex-grow сколько нужно элементу свободного пространства
коэф. увеличения
2. flex-shrink сколько нужно элементу свободного пространства
коэф. уменьшения
3. flex-basis ~= width для элемента
auto, 0, 200px, max-content, min-content, fil-content
4. align-self 

*/

.justify_content_center{
    justify-content: center;
}

.justify_content_space_between{
    justify-content: space-between;
}

.dir_row{
    flex-direction: row-reverse;
}
.dir_col{
    flex-direction: column-reverse;
}

.container{
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    flex-wrap: nowrap;
    flex-direction: row;
}

.container_styles{
    background-color: dodgerblue;
    height: 200px;
    /*width: 400px;*/

}

.item{
    width: 200px;
    height: 100px;
    flex-grow: 1;
}

.item_styles{
    background-color: rgb(193, 192, 192);
    border: 2px solid black;
    text-align: center;
    font-size: 30px;
    color: white;
}

.grow1{
    flex-grow: 1;
}

.grow2{
    flex-grow: 2;
}

.grow3{
    flex-grow: 3;
}

.grow4{
    flex-grow: 4;
}

.flex_basis_item1{
    flex-basis: auto;
}